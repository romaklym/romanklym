import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:klymroman/widgets/square_step_counter.dart';

class FaqDialog extends StatefulWidget {
  final double widthFactor;
  final double heightFactor;
  final double padding;
  final double fontSize;
  final double titleBarHeight;
  final double cardElevation;
  final double cardBorderRadius;
  final double expansionTilePadding;
  final double iconSize;

  const FaqDialog({
    super.key,
    this.widthFactor = 0.75,
    this.heightFactor = 0.8,
    this.padding = 16.0,
    this.fontSize = 16.0,
    this.iconSize = 22.0,
    this.titleBarHeight = 40.0,
    this.cardElevation = 3.0,
    this.cardBorderRadius = 12.0,
    this.expansionTilePadding = 16.0,
  });

  @override
  State<FaqDialog> createState() => _FaqDialogState();
}

class _FaqDialogState extends State<FaqDialog> {
  final List<bool> _isOpenList = [];
  final List<FaqItem> _faqItems = [
    FaqItem(
      question: "What is the Touch Grass token?",
      answer:
          "The Touch Grass token is the native cryptocurrency for the Touch Grass mobile game. It is built on the Solana blockchain and is used for in-game rewards, purchases, and ecosystem activities such as owning QR stations or participating in leaderboards.",
    ),
    FaqItem(
      question: "What is Touch Grass?",
      answer:
          "Touch Grass is a real-time cross-platform mobile game where players explore real-world locations, complete missions, and compete in leaderboards to earn cryptocurrency rewards.",
    ),
    FaqItem(
      question: "Why was this token created?",
      answer:
          "The token powers the Touch Grass ecosystem, allowing players to earn, trade, and spend within the game. It also supports the project by funding development, rewarding players, and incentivizing participation.",
    ),
    FaqItem(
      question: "What is the total supply of the token?",
      answer: "The total supply is 100 billion tokens.",
    ),
    FaqItem(
      question: "How is the token supply distributed?",
      answer:
          "40% for game rewards.\n25% for initial liquidity pool.\n15% for DEX liquadity pool (locked with a gradual release).\n10% for team allocation.\n7% for the development fund.\n3% for marketing.",
    ),
    FaqItem(
      question: "What does “locked supply” mean?",
      answer:
          "Locked supply refers to tokens that are secured and cannot be accessed or traded until a specific date or condition is met. For example, team tokens are locked for 12 months to build trust.",
    ),
    FaqItem(
      question: "What will the transaction fee of 0.25% be used for?",
      answer:
          "The transaction fee will support the ecosystem by funding game development, marketing, and operational costs. A portion may also be burned to create token scarcity.",
    ),
    FaqItem(
      question: "What is the purpose of the liquidity pool?",
      answer:
          "The liquidity pool ensures the token can be traded on decentralized exchanges, providing stability and reducing price volatility.",
    ),
    FaqItem(
      question: "How do I earn tokens in the game?",
      answer:
          "Players earn tokens by completing missions, achieving high leaderboard rankings, owning QR stations, and participating in events.",
    ),
    FaqItem(
      question: "What can I do with the tokens I earn?",
      answer:
          "Tokens can be used to:\n• Buy in-game items such as energy, diamonds, and skins.\n• Purchase QR stations to earn passive income.\n• Trade or hold for potential value growth.",
    ),
    FaqItem(
      question: "What are QR stations?",
      answer:
          "QR stations are player-owned game locations. Owners earn a percentage of token rewards generated by players who interact with their stations.",
    ),
    FaqItem(
      question: "Will there be leaderboards in the game?",
      answer:
          "Yes! Daily, weekly, and monthly leaderboards will reward top-performing players with tokens and other prizes.",
    ),
    FaqItem(
      question: "When will the token launch?",
      answer: "The token is scheduled to launch in March 2025.",
    ),
    FaqItem(
      question: "When will the beta version of the game be released?",
      answer:
          "The beta version of the game will launch in May 2025, initially for iOS and Android in the U.S.",
    ),
    FaqItem(
      question: "When will the game go global?",
      answer:
          "The global launch is planned for November 2025, along with cross-platform support for Web, macOS, Linux, and Windows.",
    ),
    FaqItem(
      question: "What makes the Touch Grass token valuable?",
      answer:
          "The token is deeply integrated into the game’s economy, ensuring consistent demand through in-game purchases, rewards, and ownership mechanics like QR stations. Additionally, limited supply and token burns create scarcity over time.",
    ),
    FaqItem(
      question: "Can I stake my tokens?",
      answer:
          "Staking options will be introduced after the global launch, allowing holders to earn passive rewards or unlock exclusive in-game perks.",
    ),
    FaqItem(
      question: "Is the token deflationary?",
      answer:
          "Yes, a portion of transaction fees will be burned, reducing the total supply and creating deflationary pressure.",
    ),
    FaqItem(
      question: "Where can I buy the Touch Grass token?",
      answer:
          "The token will be available on decentralized exchanges (DEXs) like Raydium and Orca after its launch.",
    ),
    FaqItem(
      question: "Is the token a good investment?",
      answer:
          "While the token offers strong utility within the game ecosystem, cryptocurrency investments are inherently risky. Please do your own research and invest responsibly.",
    ),
    FaqItem(
      question: "Will the token be listed on centralized exchanges (CEXs)?",
      answer:
          "Initial trading will be on DEXs, but we plan to explore CEX listings as the project grows.",
    ),
    FaqItem(
      question: "Can I earn real money by playing?",
      answer:
          "Yes! By earning Touch Grass tokens, players can convert them to other cryptocurrencies or fiat money through exchanges.",
    ),
    FaqItem(
      question: "How often will rewards be distributed?",
      answer:
          "Rewards for leaderboards and events will be distributed weekly, while other rewards (e.g., missions) will be earned in real-time.",
    ),
    FaqItem(
      question: "What are the benefits of owning a QR station?",
      answer:
          "QR station owners earn a percentage of the token rewards generated in their areas. It’s a way to invest in the ecosystem and earn passive income.",
    ),
    FaqItem(
      question: "How can I get involved in the community?",
      answer:
          "Join us on Discord, Twitter, and other social platforms to stay updated, participate in events, and engage with fellow players and token holders.",
    ),
    FaqItem(
      question: "Will there be governance for token holders?",
      answer:
          "Governance features may be introduced in the future, allowing token holders to vote on ecosystem updates and improvements.",
    ),
    FaqItem(
      question: "How can I contact the team?",
      answer:
          "For inquiries, visit our official website or contact us through our social media channels.",
    ),
  ];

  @override
  void initState() {
    super.initState();
    _isOpenList.addAll(List.filled(_faqItems.length, false));
  }

  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.of(context).size.width * widget.widthFactor;
    final height = MediaQuery.of(context).size.height * widget.heightFactor;

    return Dialog(
      insetPadding: EdgeInsets.zero,
      child: Container(
        width: width,
        height: height,
        decoration: BoxDecoration(
          color: Colors.transparent,
          borderRadius: BorderRadius.circular(4),
          border: Border.all(
            color: const Color(0xFF704214),
            width: 2.0,
          ),
          boxShadow: [
            BoxShadow(
              color: const Color(0xFF704214),
              offset: const Offset(-5, 5),
              blurRadius: 0,
            ),
          ],
        ),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(4),
          child: Stack(
            children: [
              // Background Image
              Positioned.fill(
                child: Image.asset(
                  'assets/images/3.png',
                  fit: BoxFit.cover,
                ),
              ),
              // Transparent Grid Overlay
              Positioned.fill(
                child: CustomPaint(
                  painter: _RetroGridPainter(),
                ),
              ),
              Column(
                children: [
                  // Title Bar
                  Container(
                    height: widget.titleBarHeight,
                    decoration: BoxDecoration(
                      color: const Color(0xFFFFC978),
                      borderRadius: const BorderRadius.vertical(
                        top: Radius.circular(4),
                      ),
                      border: Border(
                        bottom: BorderSide(
                          color: const Color(0xFF704214),
                          width: 2,
                        ),
                      ),
                    ),
                    child: Row(
                      children: [
                        Padding(
                          padding: EdgeInsets.only(left: widget.padding),
                          child: Text(
                            "FAQ",
                            style: TextStyle(
                              fontFamily: "Audiowide",
                              fontSize: widget.fontSize,
                              color: const Color(0xFF704214),
                            ),
                          ),
                        ),
                        const Spacer(),
                        IconButton(
                          icon: const FaIcon(
                            FontAwesomeIcons.squareMinus,
                            color: Color(0xFF704214),
                          ),
                          onPressed: () => Navigator.of(context).pop(),
                          iconSize: widget.iconSize,
                        ),
                        IconButton(
                          icon: const FaIcon(
                            FontAwesomeIcons.squareXmark,
                            color: Colors.redAccent,
                          ),
                          onPressed: () => Navigator.of(context).pop(),
                          iconSize: widget.iconSize,
                        ),
                      ],
                    ),
                  ),
                  // FAQ Content
                  Expanded(
                    child: SingleChildScrollView(
                      padding: EdgeInsets.all(widget.padding),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          SquareStepContainer(
                            title: "Frequently Asked Questions",
                            description: "",
                            icon: FontAwesomeIcons.clipboardQuestion,
                            width: 200,
                            height: 100,
                          ),
                          const SizedBox(height: 16),
                          // FAQ Items
                          ..._faqItems.asMap().entries.map((entry) {
                            final index = entry.key;
                            final item = entry.value;

                            return Card(
                              margin: const EdgeInsets.symmetric(vertical: 8),
                              color: const Color(0xFFFFF5DC),
                              elevation: widget.cardElevation,
                              shape: RoundedRectangleBorder(
                                side: BorderSide(
                                  color: const Color(0xFF704214),
                                  width: 1.5,
                                ),
                                borderRadius: BorderRadius.circular(
                                    widget.cardBorderRadius),
                              ),
                              child: ExpansionTile(
                                onExpansionChanged: (isOpen) {
                                  setState(() {
                                    _isOpenList[index] = isOpen;
                                  });
                                },
                                title: Text(
                                  item.question,
                                  style: TextStyle(
                                    fontFamily: "Audiowide",
                                    fontSize: widget.fontSize,
                                    fontWeight: FontWeight.bold,
                                    color: const Color(0xFF704214),
                                  ),
                                ),
                                trailing: Icon(
                                  _isOpenList[index]
                                      ? Icons.keyboard_arrow_up
                                      : Icons.keyboard_arrow_down,
                                  color: const Color(0xFF704214),
                                ),
                                children: [
                                  Padding(
                                    padding: EdgeInsets.all(
                                        widget.expansionTilePadding),
                                    child: Text(
                                      item.answer,
                                      style: TextStyle(
                                        fontFamily: "Audiowide",
                                        fontSize: widget.fontSize - 2,
                                        color: Colors.black54,
                                        height: 1.5,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            );
                          }),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class FaqItem {
  final String question;
  final String answer;

  FaqItem({
    required this.question,
    required this.answer,
  });
}

class _RetroGridPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.black.withValues(alpha: 0.1)
      ..strokeWidth = 0.5;

    const gridSpacing = 15.0;

    for (double x = 0; x <= size.width; x += gridSpacing) {
      canvas.drawLine(Offset(x, 0), Offset(x, size.height), paint);
    }
    for (double y = 0; y <= size.height; y += gridSpacing) {
      canvas.drawLine(Offset(0, y), Offset(size.width, y), paint);
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}
